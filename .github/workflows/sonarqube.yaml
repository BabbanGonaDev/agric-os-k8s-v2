# The Workflow perform the following:
#     GitLeak scan to check for sensitive information leaks
#     Static Code Analysis with SonarQube
#     Builds the Docker image.
#     Runs a Trivy Vulnerability Scan.
#     Authenticates to Google Cloud using OIDC.
#     Configures Docker to use gcloud for authentication.
#     Pushes the Docker image to GCR.
#     Redeploying the Kubernetes deployment using the latest image tag
#     Slack Notication for error and success

name: SonarQube Analysis

on:
  push:
    branches:
      - main

jobs:
  # Job 1: GitLeak scan to check for sensitive information leaks
  gitleak-scan:
    name: GitLeaks Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run GitLeaks Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml # Optional: Specify a custom configuration file
          base-revision: origin/main # Optional: Specify the base revision for pull requests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: core-api-alert
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: "${{ github.event.head_commit.message }} || App_version:${{ env.APP_VERSION }} "
          SLACK_TITLE: Commit Message
          SLACK_USERNAME: rtCamp
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK  }}
        if: failure()


  # Job 2: Static Code Analysis with SonarQube
  static-code-analysis:
    runs-on: ubuntu-latest
    needs: gitleak-scan  # This ensures gitleak-scan job completes first
    permissions:
      contents: 'read' 

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache SonarQube dependencies
      uses: actions/cache@v2
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: Check SonarQube Quality Gate
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Check for sonarqube ignore directives
      run: |
        if grep -r "// NOSONAR" .; then
          echo "Found // NOSONAR directive(s). Please remove them."
          exit 1
        fi
        if grep -r "sonar-ignore" .; then
          echo "Found sonar-ignore directive(s). Please remove them."
          exit 1
        fi
      shell: bash

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: core-api-alert
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: "${{ github.event.head_commit.message }} || App_version:${{ env.APP_VERSION }} "
        SLACK_TITLE: Commit Message
        SLACK_USERNAME: rtCamp
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK  }}
      if: failure()

  # Job 3: Trivy Vulnerability Scan
  build-and-push:
    runs-on: ubuntu-latest
    needs: static-code-analysis 
    permissions:
      contents: 'read'
      id-token: 'write'  # Needed for OIDC token generation


    steps:
    - name: Authenticate to Google Cloud
      id: gcp-auth
      uses: google-github-actions/auth@v1
      with: 
        workload_identity_provider: '/projects/524687905739/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: 'agricos-prod-access-from-githu@agri-os-prod.iam.gserviceaccount.com'
        # audience: "//iam.googleapis.com/projects/524687905739/locations/global/workloadIdentityPools/github-pool/providers/github-provider"

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker

    - name: Build Docker Image
      run: |
        docker build -t gcr.io/your-gcp-project-id/your-app-name:latest .
        docker build -t gcr.io/your-gcp-project-id/your-app-name:${GITHUB_SHA::7} .
      
    - name: Run Trivy Scan
      run: |
        trivy image --severity HIGH,CRITICAL gcr.io/your-gcp-project-id/your-app-name:latest

    - name: Push Docker Image
      run: |
        docker push gcr.io/your-gcp-project-id/your-app-name:latest
        docker push gcr.io/your-gcp-project-id/your-app-name:${GITHUB_SHA::7}

    - name: Install Trivy
      run: |
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update && sudo apt-get install -y trivy

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: core-api-alert
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: "${{ github.event.head_commit.message }} || App_version:${{ env.APP_VERSION }} "
        SLACK_TITLE: Commit Message
        SLACK_USERNAME: rtCamp
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK  }}
      if: failure()

# Job 4: Redeploy Kubernetes Deployment
  redeploy:
    runs-on: ubuntu-latest
    # needs: build-and-scan

    permissions:
      contents: 'read'
      id-token: 'write'  # Needed for OIDC token generation

    steps:
    - name: Authenticate to Google Cloud
      id: gcp-auth
      uses: google-github-actions/auth@v1
      with: 
        workload_identity_provider: '/projects/524687905739/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: 'agricos-prod-access-from-githu@agri-os-prod.iam.gserviceaccount.com'
        # audience: "//iam.googleapis.com/projects/524687905739/locations/global/workloadIdentityPools/github-pool/providers/github-provider"

    - name: Get GKE Credentials
      id: get-credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        # cluster_name: ${{ secrets.GKE_CLUSTER }}
        # location: ${{ secrets.GKE_ZONE }}
        cluster_name:  agric-os-prod-v2 
        location: europe-west3-a 

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Redeploy Kubernetes Deployment
      run: |
        kubectl rollout restart deployment/farming-deployment --reason="Redployment with image Tag of ${GITHUB_SHA::7} and Latest"

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: core-api-alert
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: "${{ github.event.head_commit.message }} || App_version:${{ env.APP_VERSION }} "
        SLACK_TITLE: Commit Message
        SLACK_USERNAME: rtCamp
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK  }}
      if: always()
