# The Workflow perform the following:
#     GitLeak scan to check for sensitive information leaks
#     Static Code Analysis with SonarQube
#     Builds the Docker image.
#     Runs a Trivy Vulnerability Scan.
#     Authenticates to Google Cloud using OIDC.
#     Configures Docker to use gcloud for authentication.
#     Pushes the Docker image to GCR.
#     Redeploying the Kubernetes deployment using the latest image tag
#     Slack Notication for error and success

name: Agric-os app deployment workflow

on:
  push:
    branches:
    - main
    - dev
    - staging
    - prod
    - feature/*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE: "lukhee/bg-agric-os"
  TAG: "farming"
  GKE_CLUSTER: "agric-os-prod-v2"
  GKE_ZONE: "europe-west3-a"
  ROUTE: "api/farmers"


jobs:
  # Job 1: GitLeak scan to check for sensitive information leaks
  gitleak-scan:
    name: GitLeaks Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Run GitLeaks Scan
      uses: gitleaks/gitleaks-action@v2
      with:
        config: .github/gitleaks-config.toml # Optional: Specify a custom configuration file
        base-revision: origin/main # Optional: Specify the base revision for pull requests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations,
        
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: core-api-alert
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_LINK_NAMES: true
        SLACK_MSG_AUTHOR: ${{github.actor}}
        SLACK_TITLE: Agric OS Deployment
        SLACK_MESSAGE: "${{ github.event.head_commit.message }} || App_version:${{ env.APP_VERSION }} "
        SLACK_USERNAME: rtCamp
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK  }}
      if: failure()


  # Job 2: Static Code Analysis with SonarQube
  static-code-analysis:
    runs-on: ubuntu-latest
    needs: gitleak-scan # This ensures gitleak-scan job completes first
    permissions:
      contents: 'read'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache SonarQube dependencies
      uses: actions/cache@v2
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: Check SonarQube Quality Gate
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Check for sonarqube ignore directives
      run: |
        if grep -r "sonar-ignore" . --exclude-dir='.github/workflows' --exclude='agric-os-deployment.yaml'; then
          echo "Found // NOSONAR directive(s). Please remove them."
          exit 1
        fi
        if grep -r "sonar-ignore" . --exclude-dir='.github/workflows' --exclude='agric-os-deployment.yaml'; then
          echo "Found sonar-ignore directive(s). Please remove them."
          exit 1
        fi
      shell: bash

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: core-api-alert
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_LINK_NAMES: true
        SLACK_MSG_AUTHOR: ${{github.actor}}
        SLACK_TITLE: Agric OS Deployment
        SLACK_MESSAGE: "${{ github.event.head_commit.message }} || App_version:${{ env.APP_VERSION }} "
        SLACK_USERNAME: rtCamp
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK  }}
      if: failure()

  # Job 3: Trivy Vulnerability Scan
  build-trivy-check-and-push:
    runs-on: ubuntu-latest
    needs: static-code-analysis
    continue-on-error: true
    permissions:
      contents: 'read'
      id-token: 'write' # Needed for OIDC token generation

    steps:
    - name: Authenticate to Google Cloud
      id: gcp-auth
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: '/projects/524687905739/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: 'agricos-prod-access-from-githu@agri-os-prod.iam.gserviceaccount.com'
        # audience: "//iam.googleapis.com/projects/524687905739/locations/global/workloadIdentityPools/github-pool/providers/github-provider"

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker

    - name: Build Docker Image
      run: |
        docker build -t ${IMAGE}:latest ./farmers
        docker build -t ${IMAGE}:${GITHUB_SHA::7} .farmers

    - name: Install Trivy
      run: |
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update && sudo apt-get install -y trivy

    - name: Run Trivy Scan
      run: |
        trivy image --severity HIGH,CRITICAL ${IMAGE}:latest

    - name: Push Docker Image
      run: |
        docker push ${IMAGE}:latest
        docker push ${IMAGE}:${GITHUB_SHA::7}

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: core-api-alert
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_LINK_NAMES: true
        SLACK_MSG_AUTHOR: ${{github.actor}}
        SLACK_TITLE: Agric OS Deployment
        SLACK_MESSAGE: "${{ github.event.head_commit.message }} || App_version:${{ env.APP_VERSION }} "
        SLACK_USERNAME: rtCamp
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK  }}
      if: failure()

  # Job 4: Redeploy Kubernetes Deployment
  dev-deploy:
    if: ${{ startsWith(github.ref, 'refs/heads/feature') || github.ref == 'refs/heads/dev' }}
    needs: build-trivy-check-and-push
    uses: ./.github/workflows/reuse-deploy.yaml
    with:
      DB_USERNAME: ${{ vars.DB_USERNAME }}
      DB_PASSWORD: ${{ vars.DB_PASSWORD }}
      GKE_CLUSTER: agric-os-prod-v2 #${{env.GKE_CLUSTER}}
      GKE_ZONE: europe-west3-a #${{env.GKE_ZONE}}
      REPLICAS: ${{vars.REPLICAS}}
      TAG: farming #${{env.TAG}}
      ROUTE: "api/farmers"
      IMAGE: lukhee/bg-agric-os #${{env.IMAGE}}
      ENVIRONMENT: "dev"
    secrets:
      gcp_credentials: ${{ secrets.gcp_credentials }}

  # Job 4: Redeploy Kubernetes Deployment
  staging-deploy:
    if: github.ref == 'refs/heads/main'
    needs: build-trivy-check-and-push
    uses: ./.github/workflows/reuse-deploy.yaml
    with:
      DB_USERNAME: ${{ vars.DB_USERNAME }}
      DB_PASSWORD: ${{ vars.DB_PASSWORD }}
      GKE_CLUSTER: agric-os-prod-v2 #${{env.GKE_CLUSTER}}
      GKE_ZONE: europe-west3-a #${{env.GKE_ZONE}}
      REPLICAS: ${{vars.REPLICAS}}
      TAG: farming #${{env.TAG}}
      ROUTE: "api/farmers"
      IMAGE: lukhee/bg-agric-os #${{env.IMAGE}}
      ENVIRONMENT: "production"
    secrets:
      gcp_credentials: ${{ secrets.gcp_credentials }}

  # Slack-notification:
  #   if: always()
  #   continue-on-error: true
  #   runs-on: ubuntu-latest
  #   needs: [Run-staging-Integration-Testing, Run-Integration-Testing]
  #   steps:
  #   - name: Check job1 status
  #     run: |
  #       echo "Job 1 outcome: ${{ needs.Run-staging-Integration-Testing.outcome }}"
  #       echo "Job 1 outcome: ${{ needs.Run-Integration-Testing.outcome }}"
          
